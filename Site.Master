<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Site.master.cs" Inherits="SaifPortFoliio.SiteMaster" %>

<!DOCTYPE html>
<html lang="en">
<head runat="server">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Abdullah Al Saif - Software Developer, Graphics Designer & Problem Solver Portfolio" />
    <meta name="keywords" content="Abdullah Al Saif, Portfolio, Software Developer, Graphics Designer, Programming, C++, Java, C#" />
    <meta name="author" content="Abdullah Al Saif" />
    
    <title><%: Page.Title %> - Abdullah Al Saif Portfolio</title>
    
    <!-- Favicon -->
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    
    <!-- Custom Portfolio CSS -->
    <link href="~/Content/css/portfolio.css" rel="stylesheet" />
    <link href="~/Content/css/loading.css" rel="stylesheet" />
    <link href="~/Content/css/navigation.css" rel="stylesheet" />
    
    <!-- Custom CSS Placeholder -->
    <asp:ContentPlaceHolder ID="HeadContent" runat="server"></asp:ContentPlaceHolder>
    
    <asp:PlaceHolder runat="server">
        <%: Scripts.Render("~/bundles/modernizr") %>
    </asp:PlaceHolder>
</head>
<body>
    <form runat="server">
        <asp:ScriptManager runat="server">
            <Scripts>
                <asp:ScriptReference Name="MsAjaxBundle" />
                <asp:ScriptReference Name="jquery" />
                <asp:ScriptReference Name="WebForms.js" Assembly="System.Web" Path="~/Scripts/WebForms/WebForms.js" />
                <asp:ScriptReference Name="WebUIValidation.js" Assembly="System.Web" Path="~/Scripts/WebForms/WebUIValidation.js" />
                <asp:ScriptReference Name="WebFormsBundle" />
            </Scripts>
        </asp:ScriptManager>

        <!-- Loading Screen -->
        <div id="loading-screen">
            <div class="loading-content">
                <div class="loading-circle"></div>
                <h2>Abdullah Al Saif</h2>
                <p>Loading Portfolio...</p>
            </div>
        </div>

        <!-- Navigation Menu -->
        <nav id="main-nav" class="navbar navbar-expand-lg navbar-light fixed-top">
            <div class="container">
                <a class="navbar-brand" href="#hero">
                    <span class="brand-text">Abdullah Al Saif</span>
                </a>
                
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <a class="nav-link active" href="#hero">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#about">About</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#skills">Skills</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#projects">Projects</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#contact">Contact</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link btn-admin" href="~/Admin/Login.aspx">Admin</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Main Content Area -->
        <main>
            <asp:ContentPlaceHolder ID="MainContent" runat="server">
            </asp:ContentPlaceHolder>
        </main>

        <!-- Footer -->
        <footer id="main-footer" class="footer">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <p>&copy; <%: DateTime.Now.Year %> Abdullah Al Saif. All rights reserved.</p>
                    </div>
                    <div class="col-md-6 text-end">
                        <div class="footer-social">
                            <a href="https://github.com/saif17313" target="_blank" class="footer-social-link">
                                <i class="fab fa-github"></i>
                            </a>
                            <a href="https://linkedin.com/in/abdullah-al-saif" target="_blank" class="footer-social-link">
                                <i class="fab fa-linkedin"></i>
                            </a>
                            <a href="mailto:abdullah.saif@example.com" class="footer-social-link">
                                <i class="fas fa-envelope"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </footer>

        <!-- Scripts Placeholder -->
        <asp:ContentPlaceHolder ID="ScriptsContent" runat="server"></asp:ContentPlaceHolder>
    </form>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    
    <!-- Enhanced script with navigation, animations, and projects -->
    <script>
        console.log('Master page script loaded');
        
        // Navigation and loading screen management
        function hideLoadingScreen() {
            console.log('hideLoadingScreen called');
            const loadingScreen = document.getElementById('loading-screen');
            const navigation = document.getElementById('main-nav');
            
            if (loadingScreen) {
                console.log('Loading screen found, hiding...');
                loadingScreen.style.opacity = '0';
                loadingScreen.style.transition = 'opacity 0.5s ease-out';
                
                setTimeout(function() {
                    loadingScreen.style.display = 'none';
                    console.log('Loading screen hidden');
                    
                    // Show navigation
                    if (navigation) {
                        navigation.style.display = 'block';
                        setTimeout(() => {
                            navigation.classList.add('nav-visible');
                        }, 100);
                    }
                    
                    // Start typewriter effect and initialize components
                    setTimeout(function() {
                        initTypewriter();
                        initNavigation();
                        initScrollAnimations();
                        initProjects();
                    }, 500);
                }, 500);
            } else {
                console.error('Loading screen not found');
                initTypewriter();
                initNavigation();
                initScrollAnimations();
                initProjects();
            }
        }
        
        // Navigation functionality
        function initNavigation() {
            console.log('Initializing navigation...');
            
            // Smooth scrolling for navigation links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('href');
                    const targetElement = document.querySelector(targetId);
                    
                    if (targetElement) {
                        const offsetTop = targetElement.offsetTop - 80; // Account for fixed navbar
                        window.scrollTo({
                            top: offsetTop,
                            behavior: 'smooth'
                        });
                    }
                });
            });
            
            // Navbar scroll effect
            window.addEventListener('scroll', function() {
                const navbar = document.getElementById('main-nav');
                if (window.scrollY > 50) {
                    navbar.classList.add('navbar-scrolled');
                } else {
                    navbar.classList.remove('navbar-scrolled');
                }
                
                // Update active nav link
                updateActiveNavLink();
                
                // Trigger scroll animations
                checkScrollAnimations();
            });
            
            console.log('Navigation initialized');
        }
        
        // Update active navigation link based on scroll position
        function updateActiveNavLink() {
            const sections = ['hero', 'about', 'skills', 'projects', 'contact'];
            const navLinks = document.querySelectorAll('.nav-link');
            
            let current = '';
            sections.forEach(section => {
                const element = document.getElementById(section);
                if (element) {
                    const rect = element.getBoundingClientRect();
                    if (rect.top <= 100 && rect.bottom >= 100) {
                        current = section;
                    }
                }
            });
            
            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === '#' + current) {
                    link.classList.add('active');
                }
            });
        }
        
        // Initialize scroll animations
        function initScrollAnimations() {
            // Skill progress bars animation
            const skillsSection = document.getElementById('skills');
            let skillsAnimated = false;
            
            function animateSkills() {
                if (skillsAnimated) return;
                
                const progressBars = document.querySelectorAll('.progress-bar');
                progressBars.forEach(bar => {
                    const width = bar.getAttribute('data-width');
                    setTimeout(() => {
                        bar.style.width = width + '%';
                    }, 200);
                });
                skillsAnimated = true;
            }
            
            // Check if skills section is visible
            window.checkScrollAnimations = function() {
                if (skillsSection) {
                    const rect = skillsSection.getBoundingClientRect();
                    if (rect.top <= window.innerHeight && rect.bottom >= 0) {
                        animateSkills();
                    }
                }
            };
        }
        
        // Initialize projects section
        function initProjects() {
            console.log('Initializing projects...');
            
            // Load projects from server-side data
            setTimeout(() => {
                loadProjects();
                initProjectFilters();
            }, 1000);
        }
        
        // Load and display projects
        function loadProjects() {
            const projectsGrid = document.getElementById('projects-grid');
            if (!projectsGrid) return;
            
            const projects = window.portfolioProjects || [];
            
            if (projects.length === 0) {
                projectsGrid.innerHTML = `
                    <div class="col-12 text-center">
                        <p>No projects available at the moment.</p>
                    </div>
                `;
                return;
            }
            
            let projectsHTML = '';
            
            projects.forEach((project, index) => {
                const category = getCategoryFromTechnologies(project.technologies);
                
                projectsHTML += `
                    <div class="col-lg-4 col-md-6 mb-4 project-item" data-category="${category}" data-all="true">
                        <div class="project-card">
                            <div class="project-image">
                                <div class="project-image-placeholder">
                                    <i class="fas fa-laptop-code"></i>
                                    <span>Project Image Coming Soon</span>
                                </div>
                                <div class="project-overlay">
                                    <div class="project-links">
                                        ${project.liveUrl ? `<a href="${project.liveUrl}" target="_blank" class="project-link" title="Live Demo"><i class="fas fa-external-link-alt"></i></a>` : ''}
                                        ${project.repoUrl ? `<a href="${project.repoUrl}" target="_blank" class="project-link" title="Source Code"><i class="fab fa-github"></i></a>` : ''}
                                    </div>
                                </div>
                            </div>
                            <div class="project-content">
                                <h3 class="project-title">${project.title}</h3>
                                <p class="project-description">${project.description}</p>
                                <div class="project-technologies">
                                    ${project.technologies.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                                </div>
                                <div class="project-meta">
                                    <span class="project-date">Recent Project</span>
                                    <span class="project-status status-completed">Completed</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            projectsGrid.innerHTML = projectsHTML;
            console.log('Projects loaded successfully');
        }
        
        // Get category from technologies
        function getCategoryFromTechnologies(technologies) {
            const tech = technologies.map(t => t.toLowerCase());
            
            if (tech.includes('android') || tech.includes('mobile')) return 'mobile';
            if (tech.includes('photoshop') || tech.includes('illustrator') || tech.includes('figma')) return 'design';
            return 'development';
        }
        
        // Initialize project filters
        function initProjectFilters() {
            const filterButtons = document.querySelectorAll('.filter-btn');
            const projectItems = document.querySelectorAll('.project-item');
            
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const filter = this.getAttribute('data-filter');
                    
                    // Update active button
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Filter projects
                    projectItems.forEach(item => {
                        if (filter === 'all' || item.getAttribute('data-' + filter) === 'true' || item.getAttribute('data-category') === filter) {
                            item.style.display = 'block';
                            item.style.opacity = '0';
                            setTimeout(() => {
                                item.style.opacity = '1';
                            }, 100);
                        } else {
                            item.style.opacity = '0';
                            setTimeout(() => {
                                item.style.display = 'none';
                            }, 300);
                        }
                    });
                });
            });
            
            console.log('Project filters initialized');
        }
        
        // Enhanced typewriter effect
        function initTypewriter() {
            console.log('Starting typewriter effect...');
            
            const typewriterElement = document.getElementById('typewriter');
            if (!typewriterElement) {
                console.error('Typewriter element not found');
                return;
            }
            
            const roles = ['Software Developer', 'Graphics Designer', 'Problem Solver'];
            let roleIndex = 0;
            let charIndex = 0;
            let isDeleting = false;
            
            function type() {
                const currentRole = roles[roleIndex];
                
                if (isDeleting) {
                    typewriterElement.textContent = currentRole.substring(0, charIndex - 1);
                    charIndex--;
                    
                    if (charIndex === 0) {
                        isDeleting = false;
                        roleIndex = (roleIndex + 1) % roles.length;
                        setTimeout(type, 800);
                        return;
                    }
                    setTimeout(type, 80);
                } else {
                    typewriterElement.textContent = currentRole.substring(0, charIndex + 1);
                    charIndex++;
                    
                    if (charIndex === currentRole.length) {
                        isDeleting = true;
                        setTimeout(type, 2500);
                        return;
                    }
                    const typingSpeed = Math.random() * 100 + 80;
                    setTimeout(type, typingSpeed);
                }
            }
            
            setTimeout(type, 1000);
            console.log('Typewriter effect started');
        }
        
        // Initialize everything
        setTimeout(hideLoadingScreen, 3000);
        
        window.addEventListener('load', function() {
            console.log('Window loaded');
            setTimeout(hideLoadingScreen, 1000);
        });
        
        console.log('Scripts initialized');
    </script>
    
    <!-- Portfolio JavaScript -->
    <script src="~/Scripts/portfolio.js"></script>
    
    <asp:PlaceHolder runat="server">
        <%: Scripts.Render("~/Scripts/bootstrap.js") %>
    </asp:PlaceHolder>
</body>
</html>
